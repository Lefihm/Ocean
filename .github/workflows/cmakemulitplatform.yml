# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches:
      - actions-test
          
  pull_request:
    branches:
      - actions-test
      


jobs:
  build:
    runs-on: ${{ matrix.os }}

    permissions:
    
      contents: read

      
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug]
        c_compiler: [gcc,clang]
        include:
        #this might break things.
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            

            
        exclude:
        
          - os: ubuntu-latest
            c_compiler: gcc


          - os: ubuntu-latest
            c_compiler: clang

            
          - os: ubuntu-latest
            c_compiler: cl
          - os: windows-latest
            c_compiler: cl
            
    steps:
    
    - uses: actions/checkout@v4
      with:
        clean: true

        
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

        
    - name: Linux installs (Ubuntu)
      if: runner.os == 'Linux'
      shell: bash
      run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-noble.list http://packages.lunarg.com/vulkan/lunarg-vulkan-noble.list
          sudo apt update
          sudo apt install -y vulkan-sdk

          sudo apt install libwayland-dev libxkbcommon-dev xorg-dev
          
          sudo apt-get update
          
    #this is what is documented. Lets see if it works, probably not.
    - name: Windows installs
      if: runner.os == 'Windows'
      env:
        CMAKE_GENERATOR: "MinGW Makefiles"
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        install: >-
          git
          base-devel mingw-w64-ucrt-x86_64-toolchain
          mingw-w64-x86_64-ninja

    #this tries to force the necessary packages to be downloaded via the submodules.
    - name: download necessary packages (ALL SYSTEMS)

      uses: actions/cache@v4.2.3
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: |
          Ocean/vendor
        # An explicit key for restoring and saving the cache
        key:  ${{runner.os}}-submodules
       
        # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
        enableCrossOsArchive: true # optional, default is false
        # Fail the workflow if cache entry is not found
        fail-on-cache-miss: false # optional, default is false
        # Run the post step to save the cache even if another step before fails
        save-always: false # optional, default is false

          
    - name: Git submodules
      if: steps.cache-submodules.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
          submodules: recursive

      #This needs to be done, or i need to interact with msys2 ucrt64 for that.
    - name: PUT MSYS ON WINDOWS PATH
      if: runner.os == 'Windows'
      #from: https://github.com/scivision/rpn-calc-fortran/blob/main/.github/workflows/ci_cmake.yml#L46
      run: echo "C:\a\temp\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #make sure to set the compilation to mingw make files for windows.
      #shell needed to be stated as it defaults to powershell on windows.
      shell: bash
      run: |
        cmake -G Ninja \
        -B ${{ steps.strings.outputs.build-output-dir }} \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -DOcean_BUILD_DLL=ON \
        -DOcean_BUILD_DOCS=OFF \
        -DOcean_BUILD_TESTS=ON \
        -S ${{ github.workspace }}
      
      #may have to do further specifications in here for windows and linux.
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
