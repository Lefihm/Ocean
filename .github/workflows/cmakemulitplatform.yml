# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches:
      - actions-test
          
  pull_request:
    branches:
      - actions-test
      


jobs:
  build:
    runs-on: ${{ matrix.os }}

    permissions:
    
      contents: read

      
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Debug]
        c_compiler: [gcc,clang,cl]
        include:
        
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            
        exclude:
          - os: ubuntu-latest
            c_compiler: cl
            
    steps:
    
    - uses: actions/checkout@v4
      with:
        clean: true

        
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

        
    - name: per os installs (Windows and Linux)
      #temporary until i get something.



      #FORCES UPDATE, probably should put this in a variable.
      #structure: Overall command
                    #important future commands
                    #Other deps that may need previous deps.
      
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then

          
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-noble.list http://packages.lunarg.com/vulkan/lunarg-vulkan-noble.list
          sudo apt update
          sudo apt install -y vulkan-sdk

          
          sudo apt install -y libwayland-dev libxkbcommon-dev xorg-dev

          sudo apt-get update
          
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "Windows :) set up msys2 to actually test this."
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi
      shell: bash
        


    #this tries to force the necessary packages to be downloaded via the submodules.
    - name: download necessary packages (ALL SYSTEMS)
    #quick test.
      shell: bash
      run: |
        git submodule update --force --recursive --init





    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      
      #new fix, see if this ensures that it uses the correct generator, and actually finds the compiler this time,
      #instead of trying to use bash.
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DOcean_BUILD_DLL=ON \
          -DOcean_BUILD_DOCS=OFF \
          -DOcean_BUILD_TESTS=ON \
          -S ${{ github.workspace }}

    - name: check2
      run: |
        echo "Config FINISHED"
      
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    #- name: Test
   #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
   #   run: ctest --build-config ${{ matrix.build_type }}
